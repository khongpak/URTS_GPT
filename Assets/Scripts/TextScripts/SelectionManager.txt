using System.Collections.Generic;
using UnityEngine;
using URTS_GPT.UI;
// üÜï ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ UI
using UnityEngine.EventSystems;
// üÜï ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
using URTS_GPT.MovementSystem;

namespace URTS_GPT.SelectionSystem
{
    public class SelectionManager : MonoBehaviour
    {
        [SerializeField] private Camera mainCamera;
        [SerializeField] private LayerMask selectableMask = ~0; // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Layer "Unit"
        [SerializeField] private SelectionBoxUI selectionBoxUI;

        private readonly HashSet<Selectable> selected = new HashSet<Selectable>();
        private Vector2 dragStart;
        private bool dragging;
        private Selectable hovered;

        // üÜï ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô
        [SerializeField] private LayerMask groundLayer;
        // üÜï ‡∏£‡∏∞‡∏¢‡∏∞ Raycast ‡πÑ‡∏õ‡∏û‡∏∑‡πâ‡∏ô
        [SerializeField] private float maxRaycastDistance = 1000f;

        private void Awake()
        {
            if (mainCamera == null) mainCamera = Camera.main;
        }

        private void Update()
        {
            // ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∏‡∏ì) ‚Äî
            UpdateHover();
            HandleClickAndDrag();
            // ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‚Äî
            HandleRightClickMove();
        }

        private void UpdateHover()
        {
            var hit = Raycast();
            var newHovered = hit.HasValue ? hit.Value.selectable : null;
            if (newHovered != hovered)
            {
                if (hovered != null && !selected.Contains(hovered)) hovered.SetHovered(false);
                hovered = newHovered;
                if (hovered != null && !selected.Contains(hovered)) hovered.SetHovered(true);
            }
        }

        private (Selectable selectable, RaycastHit hit)? Raycast()
        {
            Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);
            if (Physics.Raycast(ray, out var hit, 1000f, selectableMask))
            {
                var s = hit.collider.GetComponentInParent<Selectable>();
                if (s != null) return (s, hit);
            }
            return null;
        }

        private void HandleClickAndDrag()
        {
            if (Input.GetMouseButtonDown(0))
            {
                dragStart = Input.mousePosition;
                dragging = true;
                selectionBoxUI?.Begin(dragStart);
            }

            if (dragging && Input.GetMouseButton(0))
            {
                selectionBoxUI?.Drag(Input.mousePosition);
            }

            if (dragging && Input.GetMouseButtonUp(0))
            {
                dragging = false;
                var end = (Vector2)Input.mousePosition;
                selectionBoxUI?.End();

                Rect screenRect = GetScreenRect(dragStart, end);
                bool isBox = screenRect.size.magnitude > 10f; // ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡πà‡∏ô

                bool shift = Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift);
                bool ctrl  = Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightControl);

                if (!shift && !ctrl) ClearSelection();
                if (isBox) BoxSelect(screenRect, shift, ctrl);
                else ClickSelect(shift, ctrl);
            }
        }

        private void ClickSelect(bool shift, bool ctrl)
        {
            var hit = Raycast();
            if (!hit.HasValue) return;
            var s = hit.Value.selectable;

            if (ctrl)
            {
                if (selected.Contains(s)) Deselect(s);
                else Select(s);
            }
            else
            {
                // shift ‡∏´‡∏£‡∏∑‡∏≠ none (none ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß)
                Select(s);
            }
        }

        private void BoxSelect(Rect screenRect, bool shift, bool ctrl)
        {
            foreach (var s in Selectable.Registry)
            {
                Vector3 sp = mainCamera.WorldToScreenPoint(s.WorldCenter);
                if (sp.z < 0f) continue; // ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
                if (screenRect.Contains(sp))
                {
                    if (ctrl && selected.Contains(s)) Deselect(s);
                    else Select(s);
                }
            }
        }

        private void Select(Selectable s)
        {
            if (selected.Add(s))
            {
                s.SetSelected(true);
                s.SetHovered(false);
            }
        }

        private void Deselect(Selectable s)
        {
            if (selected.Remove(s))
            {
                s.SetSelected(false);
                if (s == hovered) s.SetHovered(true); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÇ‡∏ä‡∏ß‡πå hover ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå
            }
        }

        public void ClearSelection()
        {
            foreach (var s in selected) s.SetSelected(false);
            selected.Clear();
        }

        private static Rect GetScreenRect(Vector2 start, Vector2 end)
        {
            Vector2 min = Vector2.Min(start, end);
            Vector2 max = Vector2.Max(start, end);
            return new Rect(min, max - min);
        }

        // ==============================
        // üÜï ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤
        // ==============================
        private void HandleRightClickMove()
        {
            // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡∏Å‡∏î‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°
            if (!Input.GetMouseButtonDown(1)) return;
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ UI ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô
            if (EventSystem.current != null && EventSystem.current.IsPointerOverGameObject()) return;

            // ‡∏¢‡∏¥‡∏á‡πÄ‡∏£‡∏¢‡πå‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏â‡∏≤‡∏Å
            Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);
            if (Physics.Raycast(ray, out var hit, maxRaycastDistance, groundLayer))
            {
                ClickMoveMarker.Spawn(hit.point);
                IssueMoveOrder(hit.point);
            }
        }

        private void IssueMoveOrder(Vector3 destination)
        {
            foreach (var s in selected)
            {
                if (s == null) continue;
                if (s.TryGetComponent<UnitMoveAgent>(out var mover))
                {
                    mover.MoveTo(destination);
                }
            }
        }
    }
}